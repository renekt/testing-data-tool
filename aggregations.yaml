version: 1.0.0
aggregations:
  user_order_summary:
    id: AGG001
    description: "Aggregate user data with their order history"
    steps:
      - id: step1
        operation_id: getUserData
        api_spec: apis/pacs_api.yaml
        params:
          path:
            user_id: "{user_id}"
          query:
            include_details: true
        save_as: user_info
        jmespath_query: "user.data"
        validation:
          field: "user.data.name"
          condition: "contains"
          value: "A"
      
      - id: step2
        operation_id: getOrderHistory
        api_spec: apis/pacs_api.yaml
        params:
          query:
            user_id: "{user_id}"
            status: "completed"
        save_as: orders
        jmespath_query: "orders[*].{order_id: id, total: amount, date: created_at}"
    
    transform_query: "{
      input_user_id: user_id,
      user_data: {
        user_id: user_info.id,
        name: user_info.name,
        email: user_info.email,
        validation_status: user_info_validation.is_valid,
        validation_details: user_info_validation.validation_result,
        total_orders: length(orders),
        total_spent: sum(orders[*].total),
        recent_orders: orders[0:5]
      },
      validation_summary: {
        all_steps: all_results,
        valid_steps: valid_results
      }
    }"

  find_valid_users:
    id: AGG002
    description: "Find users with valid email from a list of user IDs"
    iteration:
      input_param: "user_id"
      input_list: "{user_ids}"
      validation:
        field: "user_info.email"
        condition: "not_empty"
    steps:
      - id: step1
        operation_id: getUserData
        api_spec: apis/pacs_api.yaml
        params:
          path:
            user_id: "{user_id}"
          query:
            include_details: true
        save_as: user_info
        jmespath_query: "user.data"
    
    transform_query: "{
      valid_user_ids: valid_items[*].user_id,
      user_details: valid_items[*].{
        input_id: user_id,
        api_id: user_info.id,
        name: user_info.name,
        email: user_info.email
      }
    }"

  product_order_details:
    id: AGG003
    description: "Get product details for each item in an order"
    steps:
      - id: step1
        operation_id: getOrderHistory
        api_spec: apis/pacs_api.yaml
        params:
          query:
            user_id: "{user_id}"
        save_as: orders
        filter_query: "orders[?id == '{order_id}']"
      
      - id: step2
        operation_id: searchProducts
        api_spec: apis/product_api.yaml
        params:
          body:
            search_criteria:
              product_ids: "{orders[0].items[*].product_id}"
        save_as: products
        jmespath_query: "products[*].{id: product_id, name: product_name, price: current_price}"
    
    transform_query: "{
      order_details: orders[0],
      items: orders[0].items[*].{
        product_id: product_id,
        quantity: quantity,
        product_info: products[?id == product_id][0]
      }
    }" 